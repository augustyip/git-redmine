#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright 2011 YUMEMI Inc.
# http://yumemi.co.jp/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# If you find the document in Japanase, please see the following URL.
# このツールの使い方を日本語でご覧になりたい方はこちらをご参照ください。
# http://yumewaza.yumemi.co.jp/2011/08/git-redmine-integration-using-rest-api-python.html

import urllib2
import json
from subprocess import *
from optparse import OptionParser, OptionValueError
import tempfile
import os
from urlparse import urlparse
import httplib
import urllib
from termcolor import colored, cprint


api_key = Popen(["git", "config", "redmine.apiKey"], stdout=PIPE).communicate()[0].strip()
if not api_key:
    print "Please configure Redmine API key using:"
    print "    git config --global redmine.apiKey '<your api key>'"
    quit(1)

project_url = Popen(["git", "config", "redmine.projectUrl"], stdout=PIPE).communicate()[0].strip()
if not project_url:
    print "Please configure Redmine URL of the project using:"
    print "    git config redmine.projectUrl '<project url>'"
    quit(1)

usage = "usage: %prog [options] keyword"
parser = OptionParser(usage)
parser.add_option("--done-ratio", dest="done_ratio", type="int",
                  help="Update done ratio of the issue", metavar="RATIO")
parser.add_option("--status", dest="status", type="int", help="Update status of the issue", metavar="STATUS_ID")
(options, args) = parser.parse_args()

u = urlparse(project_url)

def get_issue(id):
    # ssl support
    if u.scheme != 'https':
        conn = httplib.HTTPConnection(u.netloc)
    else:
        conn = httplib.HTTPSConnection(u.netloc)
    conn.request("GET", "%s/issues/%d.json?key=%s" % (u.path, id, api_key))
    r1 = conn.getresponse()
    if r1.status != 200:
        print r1.status, r1.reason
        quit(1)

    data1 = r1.read()
    return json.loads(data1)

def update_issue(id, data):
    json_data = json.dumps(data)

    # ssl support
    if u.scheme != 'https':
        conn = httplib.HTTPConnection(u.netloc)
    else:
        conn = httplib.HTTPSConnection(u.netloc)

    conn.request("PUT", "%s/issues/%d.json?key=%s" % (u.path, id, api_key), body=json_data, headers={"Content-Type":"application/json"})
    r1 = conn.getresponse()
    if r1.status != 200:
        print r1.status, r1.reason
        quit(1)

if args:
    if args[0] == 'commit':
        if len(args) < 2:
            print "Issue number is absent:"
            print "    git redmine commit <issue number>"
            quit(1)

        issue_ids = []
        subjects = []
        for issue_id in args[1:]:
            issue_id = int(issue_id)
            if issue_id > 0 :
                issue = get_issue(issue_id)
                issue_ids.append('#%s' % (issue_id))
                subjects.append(issue['issue']['subject'].encode('utf-8'))

        tmp_file = tempfile.mkstemp()
        with os.fdopen(tmp_file[0], "w") as fh:
            fh.write('refs %s: %s' % (', '.join(issue_ids), '; '.join(subjects)))
            fh.close()
        retcode = call(["git", "commit", "-v", "--edit", "--file", tmp_file[1]])
        os.remove(tmp_file[1])

        if retcode == 0:
            for issue_id in args[1:]:
                issue_id = int(issue_id)
                if issue_id > 0 and options.done_ratio:
                    update_issue(issue_id, {'issue':{'done_ratio':options.done_ratio}})
                if issue_id > 0 and options.status:
                    update_issue(issue_id, {'issue':{'status_id':options.status}})

        quit(retcode)

    if args[0].isdigit():
        issue = get_issue(int(args[0]))
        print "%s : #%d" % ("ID".rjust(16), issue["issue"]["id"])
        print "%s : %s" % ("Priority".rjust(16), issue["issue"]["priority"]["name"])
        print "%s : %s" % ("Tracker".rjust(16), issue["issue"]["tracker"]["name"])
        print "%s : %d%%" % ("Done Ratio".rjust(16), issue["issue"]["done_ratio"])
        print "%s : %s" % ("Status".rjust(16), issue["issue"]["status"]['name'])
        print "%s : %s" % ("Assigned To".rjust(16), (issue["issue"]["assigned_to"]["name"] if "assigned_to" in issue["issue"] else "(none)"))  # fixed the case nobody is assigned to the issue
        print "%s : %s" % ("Subject".rjust(16), issue["issue"]["subject"])
        print "------"
        print issue["issue"]["description"]
        quit(0)

f = urllib2.urlopen('%s/issues.json?limit=200&sort=fixed_version:desc&assigned_to_id=me&status_id=*&key=%s' % (project_url, api_key))
data = f.read()
j = json.loads(data)

issues = {}
parent_issues = []
fixed_version = []

for issue in j["issues"]:
    if len(fixed_version) < 2 and 'fixed_version' in issue and issue['fixed_version']['id'] not in fixed_version:
        fixed_version.append(issue['fixed_version']['id'])

for issue in j["issues"]:
    issues[issue['id']] = issue
    if 'parent' in issue and 'fixed_version' in issue and issue['fixed_version']['id'] in fixed_version:
        parent_issues.append(issue['parent']['id'])

parent_issues = list(set(parent_issues))

# TODO: base issue status to change the color
color = {
    1: None,
    2: None,
    3: None,
    4: None,
    5: None,
}

on_color = {
    1: 'on_cyan',
    2: 'on_yellow',
    3: 'on_green',
    4: 'on_red',
    5: 'on_magenta',
}

for issue_id in parent_issues:
    f = urllib2.urlopen('%s/issues/%d.json?include=children&key=%s' % (project_url, issue_id, api_key))
    data = f.read()
    j = json.loads(data)
    i = j['issue']
    cprint("%s/issues/%d" % (project_url, i['id']), None, None, ['underline'])
    cprint("%s %s [%s] %s <<%s>>" % (i['project']['name'], ('#%d' % i["id"]).ljust(5), i['status']['name'], i['subject'], i['fixed_version']['name']), None, None, ['reverse'])
    if 'children' in i:
        for child in i['children']:
            if child['id'] in issues:
                c = issues[child['id']]
                cprint(" +-- %s [%s] %s" % (('#%d' % c["id"]).ljust(5), c['status']['name'], c['subject']), color[c['status']['id']], on_color[c['status']['id']])
    print ''


quit(0)
